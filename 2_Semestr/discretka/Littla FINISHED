using System;
using System.Collections.Generic;

public class HelloWorld
{
    public static List<(double start,double end)> alg_Littla(double[,] matrix){
        
        double low_limit = 0;
        int len = matrix.GetLength(0);
        
        List<(double start, double end)> points = new List<(double,double)>();

        for(int _ = 0; _<len-3;_++){
             //редукция строк -> столбцов
            for(int y = 1; y<matrix.GetLength(0);y++){
                double min = matrix[y,1];
                for(int x = 1; x<matrix.GetLength(0);x++){
                    min = Math.Min(min,matrix[y,x]);
                }
                if(min==double.PositiveInfinity)continue;
                low_limit+=min;
                for(int x = 1; x<matrix.GetLength(0);x++){
                    matrix[y,x] = matrix[y,x] - min;
                }
            }
            for(int x = 1; x<matrix.GetLength(0);x++){
                double min = matrix[1,x];
                for(int y = 1; y<matrix.GetLength(0);y++){
                    min = Math.Min(min,matrix[y,x]);
                }
                if(min==double.PositiveInfinity)continue;
                low_limit+=min;
                for(int y = 1; y<matrix.GetLength(0);y++){
                    matrix[y,x] = matrix[y,x] - min;
                }
            }
            
            //Находим нуль с наибольшим коэффициентом
            int dx = 1;
            int dy = 1;
            double max = double.NegativeInfinity;
            
            for(int y = 1; y<matrix.GetLength(0);y++){
                for(int x = 1; x<matrix.GetLength(0);x++){
                    if(matrix[y,x]!=0) continue;
                    
                    double minstroka = double.PositiveInfinity;
                    for(int i = 1; i<matrix.GetLength(0);i++){
                        if(i==x)continue;
                        minstroka = Math.Min(minstroka, matrix[y,i]);
                    }
                    double minstolb = double.PositiveInfinity;
                    for(int i = 1; i<matrix.GetLength(0);i++){
                        if(i==y)continue;
                        minstolb = Math.Min(minstolb, matrix[i,x]);
                    }
                    if(minstroka + minstolb > max){
                        max = minstroka+minstolb;
                        dx=x;
                        dy=y;
                    }
                }
            }

            points.Add((matrix[dy,0], matrix[0,dx])); //Добавляем наше ребро

            //Теперь нужно заменить ребро, которое может привести к циклу, бесконечностью
            
            //От нашего точки dx идем в обратную сторону, чтобы найти начало
            //От нашей точки dy идем дальше, чтобы найти конец

            //Найдем конец
            double end = matrix[0,dx];
            while(true){
                bool found = false;
                foreach(var point in points){
                    if(end == point.start){
                        end = point.end;
                        found = true;
                        break;
                    }
                }
                if(!found)break;
            }
            //Найдем начало
            double start = matrix[dy,0];
            while(true){
                bool found = false;
                foreach(var point in points){
                    if(start == point.end){
                        start = point.start;
                        found = true;
                        break;
                    }
                }
                if(!found)break;
            }
            //Нашли города, соединение которых приведет к циклу - (end,start)

            for(int x = 1; x<matrix.GetLength(0); x++){
                for(int y = 1; y<matrix.GetLength(1); y++){
                    if(matrix[y,0] == end && matrix[0,x] == start){ matrix[y,x] = double.PositiveInfinity; break;};
                }
            }

            double[,] newMatrix = new double[matrix.GetLength(0)-1,matrix.GetLength(0)-1];
            int realx = 0; int realy = 0;
            for(int y = 0;y<matrix.GetLength(0);y++){
                if(y==dy)continue;
                realx = 0;
                for(int x = 0;x<matrix.GetLength(0);x++){
                if(x==dx)continue;
                newMatrix[realy,realx] = matrix[y,x];
                realx++;
                }
                realy++;
            }
            matrix = newMatrix;

            

        }
        points.Add((matrix[1,0],matrix[0,2]));
        points.Add((matrix[2,0],matrix[0,1]));
        low_limit+=matrix[1,2] + matrix[2,1];
        Console.WriteLine(low_limit);
        return points;
    }
    
    public static void printMatrix(double[,] matrix){
        for(int x = 0; x < matrix.GetLength(0); x++){
            Console.WriteLine();
            for(int y = 0; y < matrix.GetLength(1);y++){
                if(matrix[x,y]==double.PositiveInfinity){Console.Write("x ");}else{
                Console.Write(matrix[x,y] + " ");};
        }
    }}
    public static void Main(string[] args)
    {
        double x = double.PositiveInfinity;
        double[,] matrix = {
        {x,1,2,3,4,5,6},
        {1,x,41,40,48,40,42},
        {2,48,x,41,49,42,46},
        {3,22,22,x,23,24,19},
        {4,15,17,11,x,10,14},
        {5,47,43,18,42,x,52},
        {6,34,39,30,39,32,x}};
        
        var list = alg_Littla(matrix);
        double start, end;
        start = list[0].start;
        end = list[0].end;
        Console.Write($"{start}-{end}");
        for(int i = 0; i< list.Count-1;i++){
            for(int b = 0; b< list.Count;b++)
                if(list[b].start == end){
                    start = list[b].start;
                    end = list[b].end;
                    Console.Write($"-{end}");
                    break;
                }
                }
            }
        };
    
