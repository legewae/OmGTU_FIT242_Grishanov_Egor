//Граф взял из https://ru.wikipedia.org/wiki/Алгоритм_Краскала пример снизу

using System;

namespace ConsoleApp4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] rebra = {"ab","bc","ce","eb","bd","de","ef","df","fg","ge","ad"};
            int[] weights = {7,8,5,7,9,15,8,6,11,9,5};
            Array.Sort(weights, rebra);

            string used  = rebra[0];
            string node = "00";
            string res = used + " ";

            int sum = weights[0];
            int kompN;
            for (int i = 1; i < weights.Length; i++)
            {
                kompN = i;
                Console.WriteLine(rebra[i]);
                Console.WriteLine(node);
                
                if (used.Contains(rebra[i][0]) && used.Contains(rebra[i][1]))
                {//Проверяем если они в одном компоненте связности
                    if (node[used.IndexOf(rebra[i][0])] == node[used.IndexOf(rebra[i][1])]) continue;
                    else //Иначе тогда соединяются компоненты связности
                    {
                        string newstr = "";
                        for (int j = 0; j < node.Length; j++)
                        {
                            if (node[j] == node[used.IndexOf(rebra[i][1])])
                            {
                                newstr += node[used.IndexOf(rebra[i][0])];
                            }
                            else newstr += node[j];
                        }
                        node = newstr;
                    }
                    
                }

                //Если один из них уже использован, добавляем оба в компонент связности этой вершины
                if (used.Contains(rebra[i][0]))
                {
                    kompN = Convert.ToInt32(node[used.IndexOf(rebra[i][0])] + "");
                }
                if (used.Contains(rebra[i][1]))
                {
                    kompN = Convert.ToInt32(node[used.IndexOf(rebra[i][1])]+ "");
                }


                if (!used.Contains(rebra[i][0]))
                {
                    used += rebra[i][0];
                    node += kompN;
                }
                if (!used.Contains(rebra[i][1]))
                {
                    used += rebra[i][1];
                    node += kompN;
                }

                sum += weights[i];
                res += rebra[i] + " ";
            }

            Console.WriteLine($"Минимальная длина дерева: {sum}");
            Console.WriteLine($"Ребра такого дерева: {res}");
        }
    }
}
