using System;
using System.Collections.Generic;

namespace ConsoleApp4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string[] rebra = { "ab", "bc", "ce", "eb", "bd", "de", "ef", "df", "fg", "ge", "ad" };
            int[] weights = { 7, 8, 5, 7, 9, 15, 8, 6, 11, 9, 5 };
            
            // Сортируем рёбра по весу
            Array.Sort(weights, rebra);

            Dictionary<char, char> parent = new Dictionary<char, char>();
            
            //Каждая вершина - свой родитель
            foreach (var edge in rebra)
            {
                if (!parent.ContainsKey(edge[0])) parent[edge[0]] = edge[0];
                if (!parent.ContainsKey(edge[1])) parent[edge[1]] = edge[1];
            }

            int sum = 0;
            List<string> resultEdges = new List<string>();

            for (int i = 0; i < weights.Length; i++)
            {
                char u = rebra[i][0];
                char v = rebra[i][1];
                
                //Находим родителя(компонент связности) обойх вершин
                char rootU = Find(u, parent);
                char rootV = Find(v, parent);
                
                // Если разные, то добавляем в один компонент
                if (rootU != rootV)
                {
                    resultEdges.Add(rebra[i]);
                    sum += weights[i];
                    // Объединяем множества
                    parent[rootV] = rootU;
                }
            }

            Console.WriteLine($"Минимальная длина дерева: {sum}");
            Console.WriteLine($"Рёбра такого дерева: {string.Join(" ", resultEdges)}");
        }
        
        //функция для нахождения родителя
        static char Find(char vertex, Dictionary<char, char> parent)
        {
            if (parent[vertex] != vertex)
            {
                parent[vertex] = Find(parent[vertex], parent);
            }
            return parent[vertex];
        }
    }
}
